This is a README on scripts to generate data similar to the data contained in 
the lookup tables of the ACAS XU collision avoidance system for drones [1].  

Files included within this project  
------------

reconstruct_table.py
	Script to reconstruct a lookup table of the ACAS XU system. The script 
	creates data samples by first building a neural network using the weights 
	provided by an nnet file. The second step is firing input samples through  
	the neural network to obtain the labels. (See the FAQ for more details)  
	The script returns the data as csv file (within a folder tables).   
	
util.py
	Supplementary files for reconstruct_table script. It contains a parser for
	the nnet neural network file format (part of the code is taken by Rudy
	Bunel's github [4])	

		
nnet/ 
	Folder containing a set of neural network (weights) provided in Guy Katz's	
	repository [3]. They correspond to the approach used by Kyle Julien [5] where 
	the lookup table is represented by 45 neural networks 

tables/
    Folder containing a set of csv files that are the datasets generated by 'reconstruct_table.py'.

Usage
------------

python reconstruct_table.py [-h] [--num-samples NUM_SAMPLES] --nnet-filepath
                            NNET_FILEPATH [--output-filepath OUTPUT_FILEPATH]


Samples:

python reconstruct_table.py --num-samples 10000 
							--nnet-filepath nnet/ACASXU_run2a_1_1_batch_2000.nnet   
							 


Creates a csv file tables/table_ACASXU_run2a_1_1_batch_2000.csv in the
current working directory. 


Dependencies
------------
torch
numpy
pandas 


FAQ
------------

# What is the output format of the csv files?  
The samples are of the following format 


f0		   f1		   f2		  f3		 f4			l0         l1         l2         l3         l4
1.419e+03, -2.716e+00, 2.171e+00, 6.552e+02, 1.957e+02,	1.397e+02, 1.392e+02, 1.377e+02, 1.066e+02,	1.310e+02
4.519e+04, 1.813e+00,  1.418e+00, 5.107e+02, 4.429e+02,	9.661e+03, 9.789e+03, 9.405e+03, 6.504e+03, 9.673e+03
...


f0, ..., f4 are the features, values in the corresponding column are values of that feature.

f0 = "\rho -  Distance from ownship to intruder " 
f1 = "\theta -  Angle to intruder relative to ownship heading direction"
f2 = "\psi - the "heading angle of intruder relative to ownship heading direction""
f3 = "v_{own} - Speed of the ownship"
f4 = "v_{int} - Speed of the intruder"


l0, ..., l4 are the classification labels, values in the corresponding column are scores of that label.

l = 0  "Clear-of-Conflict"
l = 1  "weak left" 
l = 2  "weak right" 
l = 3  "strong left" 
l = 4  "strong right"

(See also [5] Fig. 4.)

# Why do you use such a complicated pipeline? 

The original dataset used by Julien et al. (2016) is not publicly available and 
could also not be obtained upon request due to licensing reasons [as of Jan 14,2019]. 
It is however possible that Julien et al. publish their data set at some point. 
In case that happens, their data should be preferred over the data generated by  
these scripts.

# Which assumptions are made?

The input samples fired into the neural network are uniformly random sampled. 
This is not the case for the data by Julien et al. However, again because of
licensing issues this probability distribution was not accessible 
[as of Jan 14,2019] and uniform random sampling is used as a backup.

# Where do I find the properties/specifications for the neural networks
represented in this data set? 

The properties on the ACAS XU networks are specified in the technical report  
on Guy Katz's CAV paper [6] Appendix VI. Take for instance Property \phi_2,   

"If the intruder is distant and is significantly slower than the ownship, the 
score of a COC advisory will never be maximal."

which was tested on all networks N_{x,y} for x >= 2 and for all y represented  
by the files nnet/ACASXU_run2a_x_y_batch_2000.nnet. 

# Which papers do I need to cite when I use these scripts?

All papers mentioned in the References. 

References
------------
[1] Kyle D Julian, Jessica Lopez, Jeffrey S Brush, Michael P Owen, 
	Mykel J Kochenderfer, Policy Compression for Aircraft Collision 
	Avoidance Systems, 2016, Digital Avionics Systems Conference (DASC)
  
[2] Guy Katz, Clark Barrett, David L Dill, Kyle Julian, Mykel J Kochenderfer,
    Reluplex: An efficient SMT solver for verifying deep neural networks,	
	2017, International Conference on Computer Aided Verification 
	
[3] Guy Katz's github repository for Reluplex  
	https://github.com/guykatzz/ReluplexCav2017/tree/master

[4] Rudy Bunel's github 
	https://github.com/oval-group/PLNN-verification

[5] Kyle D Julian, Mykel J Kochenderfer, Michael P Owen,
	Deep Neural Network Compression for Aircraft Collision Avoidance Systems,
	2018, Journal of Guidance, Control, and Dynamics 

[6] Guy Katz, Clark Barrett, David L Dill, Kyle Julian, Mykel J Kochenderfer, 2017
	Reluplex: An efficient SMT solver for verifying deep neural networks 
	(Technical report), https://arxiv.org/pdf/1702.01135.pdf	

